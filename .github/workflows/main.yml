name: Test

on: 
  push:
    branches-ignore:
      - 'circleci'
    paths-ignore:
      - 'samples/*'
      - 'stress/*'
      - 'performance/*'
      - '.github/FUNDING.YML'
      - '.github/workflows/build.yml'
      - '**/*.md'
      - '**/*.d.ts'
      - '**/*.bat'
      - '.travis.yml'
      - 'Dockerfile'
      - '.gitconfig'
      - '.gitignore'
      - 'appveyor*.*'
      - 'LICENSE*'
      - '.idea/**'
      - '.vscode/**'
      - '*.bat'
      - '*.nuspec'
      - 'tools/nuget/*'
      - '.npmignore'
      - 'test/config.json'
      - 'test/double'
      - '.circleci'
      - '.circleci/*'
      - 'README.md'


env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true # required to setup CSC
  DOTNET_CLI_TELEMETRY_OPTOUT: 1 

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, ubuntu-22.04, windows-2022]
        # os: [ windows-2019]
        electron: [29.4.6, 30.5.1, 31.6.0]
        # electron: [31.6.0, 32.1.0]
        
    name: test-${{ matrix.os }}-v${{ matrix.electron }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ matrix.os }}-${{ matrix.electron }}-${{ hashFiles('package-lock.json') }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # SDK Version to use; x will use the latest version of the 8.0 channel

      - name: Versions
        run: |
          node -v && npm -v && dotnet --version && node -p process.platform && node -p process.arch

      - name: setup electron version
        run: |
          sed -i -e 's/"electron": "=31.6.0"/"electron": "=${{ matrix.electron }}"/g' package.json
      
      - if: runner.os == 'Windows'
        uses: bhowell2/github-substring-action@1.0.2
        id: electron_version
        with:
          value: "${{ matrix.electron }}"
          length_from_start: 2

      - if: runner.os == 'Windows'
        name: Check electron-edge-js Windows pre-built files
        id: check_windows_build
        uses: andstor/file-existence-action@v3
        with:
          files: "lib/native/win32/${{ runner.arch }}/${{ steps.electron_version.outputs.substring }}.0.0/edge_coreclr.node, lib/native/win32/${{ runner.arch }}/${{ steps.electron_version.outputs.substring }}.0.0/edge_nativeclr.node"
          fail: true
          ignore_case: true
  
      - name: npm install
        run: npm i --no-audit
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - if: runner.os == 'macOS' || runner.os == 'Linux'
        name: Check electron-edge-js build file
        id: check_build
        uses: andstor/file-existence-action@v3
        with:
          files: "build/Release/edge_coreclr.node"
          fail: true
          ignore_case: true

      # - if: (runner.os == 'macOS' || runner.os == 'Linux') && steps.check_build.outputs.files_exists == 'false'
      #   name: electron-edge-js build failed
      #   run: |
      #     echo "::error file=app.js::Failed to build electron-edge-js for Electron ${{ matrix.electron }}"
      #     exit 1
      #   continue-on-error: true

      - if: runner.os == 'Windows'
        name: Run .NET 4.5 tests Windows
        timeout-minutes: 10
        run: node tools/test.js CI

      - if: runner.os == 'Windows'
        name: "Run .net core tests Windows"
        timeout-minutes: 10
        run: node tools/test.js CI
        env:
          EDGE_USE_CORECLR: 1

      - if: runner.os == 'macOS'
        name: "Run .net core tests macOS"
        run: node tools/test.js CI
        timeout-minutes: 10
        # env:
        #   EDGE_USE_CORECLR: 1

      - if: runner.os == 'Linux'
        name: "Run .net core tests Linux"
        timeout-minutes: 10
        run: |
          export DISPLAY=:99
          echo "DISPLAY=:99" >> $GITHUB_ENV
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3
          node tools/test.js CI
        # env:
        #   EDGE_USE_CORECLR: 1

      - name: "Merge test files"
        run: node tools/mergeTests.js

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.3.3
        if: success()
        with:
          name: ${{ matrix.os }}-${{ matrix.electron }}
          path: |
            test/mochawesome-report/mochawesome.json
            test/mochawesome-report/mochawesome.html

      - name: Create test report
        uses: phoenix-actions/test-reporting@v15
        if: success()
        with:
          name: test-results-${{ matrix.os }}-v${{ matrix.electron }}
          fail-on-error: true
          path: test/mochawesome-report/mochawesome.json   # Path to test results
          reporter: mochawesome-json 

