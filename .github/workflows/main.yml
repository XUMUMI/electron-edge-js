name: Test

on: 
  pull_request:
    paths-ignore:
      - 'samples/*'
      - 'stress/*'
      - 'performance/*'
      - '.github/FUNDING.YML'
      - '.github/workflows/build.yml'
      - '.github/workflows/build*.yml'
      - '.github/actions/test-build/action.yml'
      - '.github/actions/build*/*.*'
      - '.github/actions/build/*.*'
      - '**/*.md'
      - '**/*.d.ts'
      - '**/*.bat'
      - '.travis.yml'
      - 'Dockerfile'
      - '.gitconfig'
      - '.gitignore'
      - 'appveyor*.*'
      - 'LICENSE*'
      - '.idea/**'
      - '.vscode/**'
      - '*.bat'
      - '*.nuspec'
      - 'tools/nuget/*'
      - '.npmignore'
      - 'test/config.json'
      - 'test/double'
      - '.circleci'
      - '.circleci/*'
      - 'README.md'
      - '*.sln'
      - '*.vcxproj'
  push:
    branches-ignore:
      - 'circleci'
    paths-ignore:
      - 'samples/*'
      - 'stress/*'
      - 'performance/*'
      - '.github/FUNDING.YML'
      - '.github/workflows/build.yml'
      - '.github/workflows/build*.yml'
      - '.github/actions/test-build/action.yml'
      - '.github/actions/build*/*.*'
      - '.github/actions/build/*.*'
      - '**/*.md'
      - '**/*.d.ts'
      - '**/*.bat'
      - '.travis.yml'
      - 'Dockerfile'
      - '.gitconfig'
      - '.gitignore'
      - 'appveyor*.*'
      - 'LICENSE*'
      - '.idea/**'
      - '.vscode/**'
      - '*.bat'
      - '*.nuspec'
      - 'tools/nuget/*'
      - '.npmignore'
      - 'test/config.json'
      - 'test/double'
      - '.circleci'
      - '.circleci/*'
      - 'README.md'
      - '*.sln'
      - '*.vcxproj'

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true # required to setup CSC
  DOTNET_CLI_TELEMETRY_OPTOUT: 1 
  DOTNET_NOLOGO: 1 

jobs:
  electron-versions:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.electron-versions.outputs.matrix }}

    name: Resolve latest electron versions
    steps:
      - name: Get latest Electron versions for 29, 30, 31, 32, 33
        id: electron-versions
        shell: bash
        run: |
          node tools/getVersions.js
          echo "matrix=$(cat electron.txt)" >> $GITHUB_OUTPUT

  test:
    runs-on: ${{ matrix.os }}
    needs: electron-versions
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, ubuntu-22.04, windows-2022]
        # os: [ macos-14,  ubuntu-22.04]
        # electron: [32.1.2]
        electron: ${{ fromJSON(needs.electron-versions.outputs.matrix) }}
        # electron: [31.6.0, 32.1.0]
        
    name: test-${{ matrix.os }}-v${{ matrix.electron }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup-env
        with:
          electron: ${{ matrix.electron }}
          os: ${{ matrix.os }}
          replace-version: true

      - if: runner.os == 'macOS' || runner.os == 'Linux'
        name: Check electron-edge-js build file
        id: check_build
        uses: andstor/file-existence-action@v3
        with:
          files: "build/Release/edge_coreclr.node"
          fail: true
          ignore_case: true
  
      - if: runner.os == 'Windows'
        name: Run Windows tests
        uses: ./.github/actions/test-windows
        with:
          electron: ${{ matrix.electron }}

      - if: runner.os == 'macOS'
        name: Run macOS tests
        run: node tools/test.js CI
        timeout-minutes: 10

      - if: runner.os == 'Linux'
        name: Run Linux tests
        timeout-minutes: 10
        run: |
          export DISPLAY=:99
          echo "DISPLAY=:99" >> $GITHUB_ENV
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3
          node tools/test.js CI

      - name: Test report
        uses: ./.github/actions/create-test-report
        with:
          electron: ${{ matrix.electron }}
          os: ${{ matrix.os }}


# electron-versions:
#     runs-on: ubuntu-22.04
#     outputs:
#       matrix: ${{ steps.electron-test-versions.outputs.matrix }}

#     needs: build
#     name: electron-versions
#     steps:
#       - name: Electron versions
#         shell: bash
#         id: electron-versions
#         run: echo "matrix={'include':[{'electron':'29.4.6', 'os':'windows-2022'},{'electron':'30.5.1', 'os':'windows-2022'},{'electron':'31.7.5', 'os':'windows-2022'},{'electron':'32.2.6', 'os':'windows-2022'},{'electron':'33.2.1', 'os':'windows-2022'}]}" >> $GITHUB_OUTPUT

# test1:
#     strategy:
#       matrix: 
#         electron: ${{ fromJSON(needs.electron-versions.outputs.matrix) }}
#         os: [1]
#     runs-on: ${{ matrix.os }}
#     needs: electron-versions