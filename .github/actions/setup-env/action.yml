name: 'Checkout and setup'
description: 'Checks out code and sets up environment'
inputs:
  node:
    description: 'Node.js version'
    required: false
    default: '20'
  runs-on:
    description: 'Runner OS'
    required: false
    default: 'windows-2022'
  electron:
    description: 'Electron version'
    required: true
  replace-version:
    description: 'Replace electron version?'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    # - name: Checkout code
    #   uses: actions/checkout@v4

    - name: Setup NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: inputs.node
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Cache node modules
      id: cache-nodemodules
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        path: node_modules
        key: ${{ inputs.runs-on }}-${{ inputs.electron }}-${{ hashFiles('package-lock.json') }}

    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # SDK Version to use; x will use the latest version of the 8.0 channel

    - name: Versions
      shell: bash
      run: |
        node -v && npm -v && dotnet --version && node -p process.platform && node -p process.arch

    - name: "Read JSON"
      uses: actions/github-script@v7
      id: check-env
      with:
        result-encoding: string
        script: |
          try {
            const fs = require('fs')
            const jsonString = fs.readFileSync('package.json')
            var json = JSON.parse(jsonString);
            core.exportVariable('json_electron_version', json.devDependencies.electron.toString())
          } catch(err) {
            core.error("Error while reading or parsing package.json")
            core.setFailed(err)
          }

    - name: setup electron version
      shell: bash
      if: ${{ inputs.replace-version == 'true' }}
      run: |
        sed -i -e 's/${{ env.json_electron_version}}/=${{ inputs.electron }}/g' package.json

    # - if: runner.os == 'Windows'
    #   uses: agracio/github-substring-action@v1.0.0
    #   id: electron_version
    #   with:
    #     value: "${{ matrix.electron }}"
    #     length_from_start: 2

    # - if: runner.os == 'Windows'
    #   name: Check electron-edge-js Windows pre-built files
    #   id: check_windows_build
    #   uses: andstor/file-existence-action@v3
    #   with:
    #     files: "lib/native/win32/${{ runner.arch }}/${{ steps.electron_version.outputs.substring }}.0.0/edge_coreclr.node, lib/native/win32/${{ runner.arch }}/${{ steps.electron_version.outputs.substring }}.0.0/edge_nativeclr.node"
    #     fail: true
    #     ignore_case: true

    - name: npm install
      shell: bash
      run: npm ci
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1